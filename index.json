[{"content":"","date":"7 October 2022","permalink":"/tags/angular/","section":"Tags","summary":"","title":"angular"},{"content":"","date":"7 October 2022","permalink":"/tags/components/","section":"Tags","summary":"","title":"components"},{"content":"","date":"7 October 2022","permalink":"/tags/course/","section":"Tags","summary":"","title":"course"},{"content":"","date":"7 October 2022","permalink":"/","section":"davidjsmoreno.dev","summary":"","title":"davidjsmoreno.dev"},{"content":"","date":"7 October 2022","permalink":"/tags/how-to/","section":"Tags","summary":"","title":"how to"},{"content":"","date":"7 October 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"7 October 2022","permalink":"/tags/react/","section":"Tags","summary":"","title":"react"},{"content":"","date":"7 October 2022","permalink":"/tags/react-class-based/","section":"Tags","summary":"","title":"react class based"},{"content":"Hello and welcome to the second module of this React Crash Course for Angular Developers, please go to the table of content if you want to check the previous chapters.\nCourse Index\n—\nAngular vs React Components Today you’re going to learn how to create components in React, manage local state, styles, basic component communications, and a couple more things side-by-side of similar code in Angular.\nAngular Templates vs React JSX # In Angular, a template is a chunk of HTML. Use special syntax within a template to build on many of Angular\u0026rsquo;s features.\nAngular official documentation\nWith Angular templates, you usually separate your component CSS, HTML, and Logic (Typescript) into different files.\nBut with JSX you don’t separate your template code (e.g HTML) and logic in separate files, but that does not mean that the code is a mess where there’s no separation of concerns.\nThe separation of concern occurs on the code side.\nJSX For Angular Developers\nBeing said that, JSX is a custom syntax extension to JavaScript which is used for creating markup with React.\nIt might remind you a bit of a templating language, but with JSX you can use the full power of JavaScript, let’s take a look at this component with and without JSX.\nUsing JSX\nclass Hello extends React.Component { render() { return \u0026lt;div\u0026gt;Hello {this.props.toWhat}\u0026lt;/div\u0026gt;; } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(\u0026lt;Hello toWhat=\u0026#34;World\u0026#34; /\u0026gt;); Without JSX, after processing the JSX with Babel or Typescript\nclass Hello extends React.Component { render() { return React.createElement(\u0026#39;div\u0026#39;, null, `Hello ${this.props.toWhat}`); } } const root = ReactDOM.createRoot(document.getElementById(\u0026#39;root\u0026#39;)); root.render(React.createElement(Hello, {toWhat: \u0026#39;World\u0026#39;}, null)); The basics of component creation # Let’s create the classic hello world:\nReact Class components # import * as React from \u0026#39;react\u0026#39;; export class Hello extends React.Component { render() { return \u0026lt;div\u0026gt;Hello world class based component\u0026lt;/div\u0026gt;; } } React Functional components # import * as React from \u0026#39;react\u0026#39;; export const Hello = () =\u0026gt; { return \u0026lt;div\u0026gt;Hello functional component\u0026lt;/div\u0026gt;; }; Complete code examples: class and functional.\nEquivalent code in Angular # import { Component, Input } from \u0026#39;@angular/core\u0026#39;; @Component({ selector: \u0026#39;hello\u0026#39;, template: `\u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;`, }) export class HelloComponent { @Input() name: string; } Complete code example.\nIn Angular (prior v14) where we need to add the component to the module’s declaration array before being able to use it,\nIn React we need to make our component descendant of the root component.\nimport * as React from \u0026#39;react\u0026#39;; import { StrictMode } from \u0026#39;react\u0026#39;; import { createRoot } from \u0026#39;react-dom/client\u0026#39;; import App from \u0026#39;./App\u0026#39;; const rootElement = document.getElementById(\u0026#39;root\u0026#39;); const root = createRoot(rootElement); root.render( \u0026lt;StrictMode\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/StrictMode\u0026gt; ); Event handling and Component State # Let’s create a mini-todo list component to illustrate the differences.\nReact Class components # React Functional Components + Hooks # Complete code example: class and functional.\nEquivalent code in Angular # Full code example.\nLifecycles # As we mentioned before, this is a turbo-crash course, so I’d recommend taking a look at this reference for the lifecycle hooks.\nReact Class components # React Functional Components + Hooks # Complete code example: class and functional.\nEquivalent code in Angular # Complete code example\nComponent styles # Let’s take a pause here, I’d like to think that there are as many ways to style a component in React as stars in the sky, of course, that was an exaggeration but the truth is: there are A LOT of ways to style a component in React.\nThis course is going to stick to the Plain Old CSS, down the road we’re going to revisit this topic with an overview of the most popular styling methods in React.\n.foo { color: red; } // foo.tsx import ‘./styles.css’ Pipes # Pipes are simple functions to use in template expressions to accept an input value and return a transformed value JSX is javascript under the hood so everything enclosed in curly braces is considered a valid expression, so there’s no need for a built-in pipe mechanism, for example, the uppercase. pipe in Angular.\n{{word || uppercase}} In React we could do the following:\nconst uppercase = (word) { return word.toUpperCase(); } {uppercase(word)} Let’s recreate some of the built-in pipes using a couple of libraries like @stdlib/string-base and the radash chain method.\nimport * as React from \u0026#39;react\u0026#39;; import * as stringBase from \u0026#39;@stdlib/string-base\u0026#39;; import { chain } from \u0026#39;radash\u0026#39;; const { pascalcase: titleCase, uppercase } = stringBase; export const Pipes = () =\u0026gt; { const string = \u0026#39;Hello world\u0026#39;; const snakeString = \u0026#39;snake_case_string\u0026#39;; return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;p\u0026gt;{chain(titleCase)(string)}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{chain(titleCase, uppercase)(snakeString)}\u0026lt;/p\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); }; If you feel adventurous you could use the Pipe Operator (|\u0026gt;) instead of the radash chain function but not recommended for production apps yet (it’s still a proposal, not a standard yet).\nsnakeString |\u0026gt; titleCase |\u0026gt; uppercase; The opinionated nature of Angular shines in when we talk about Pipes, it provides a lot by default, in the last chapter of this course we will recommend equivalent libraries to do the same with React.\nComplete code example\nDirectives # Directives are classes that add new behavior or modify the existing behavior to the elements in the template. It is the same story as pipes, let’s recreate the built-in directives using React expressions.\nComplete code example.\nTo create custom behavior we should rely on components or hooks, but that’s a topic that will be covered in upcoming chapters.\nBasic component Communication # Pass data from parent to child. # It’s pretty straightforward, in Angular we use the Input decorator, in React we use props.\nReact # import * as React from \u0026#39;react\u0026#39;; export type Hero = { name: string; }; export type Props = { hero: Hero; leader: string; }; export const ParentToChild = (props: Props) =\u0026gt; { return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;h3\u0026gt;{props.hero.name} says:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt; I, {props.hero.name}, am at your service, {props.leader}. \u0026lt;/p\u0026gt; \u0026lt;/React.Fragment\u0026gt; ); }; Complete code example.\nEquivalent code in Angular # import { Component, Input } from \u0026#39;@angular/core\u0026#39;; export interface Hero { name: string; } @Component({ selector: \u0026#39;app-parent-to-child-hero\u0026#39;, template: ` \u0026lt;h3\u0026gt;{{hero.name}} says:\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;I, {{hero.name}}, am at your service, {{leaderName}}.\u0026lt;/p\u0026gt; `, }) export class ParentToChildHeroComponent { @Input() hero!: Hero; @Input(\u0026#39;leader\u0026#39;) leaderName = \u0026#39;\u0026#39;; } Complete code example.\nPass data from child to parent. # Like the previous one, Angular uses the Output decorator and React and callback function passed through props. Still, conceptually it’s almost the same:\nA function call will be executed by the child component where we can send data to the parent component.\nReact # Complete code example\nEquivalent code in Angular # Complete code example\nNext Chapter: Routing in React vs Angular (very soon) # From here and the rest of the course we’re going to use functional components and hooks as the standard way of creating components in React.\nIn the next module, we’re going to talk about Routing. Please subscribe to my newsletter if you want to get notified when this new chapter gets released.\nLearn more # Angular Component interaction React Component Interaction Naming conventions in React Change Detection React Functional vs Class-based components in React Fragments Angular directives in React Angular Pipes in React React class-based lifecycle with hooks ","date":"7 October 2022","permalink":"/posts/react-crash-course-for-angular-developers-components/","section":"Posts","summary":"Hello and welcome to the second module of this React Crash Course for Angular Developers, please go to the table of content if you want to check the previous chapters.","title":"React Crash Course for Angular Developers Components"},{"content":"","date":"7 October 2022","permalink":"/tags/react-hooks/","section":"Tags","summary":"","title":"react hooks"},{"content":"","date":"7 October 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"9 September 2022","permalink":"/tags/architecture/","section":"Tags","summary":"","title":"architecture"},{"content":"Course Index # React Architecture A JavaScript library for building user interfaces, reactjs.org. Real vs virtual DOM, by altexsoft One of the main differences between React and Angular is that with the latter you get a lot of out-the-box: a Router, HTTP request client, Pipes, Directives, etc.\nBut React main responsibility is to allow you to build and render your IU components, and it does that using a data structure called virtual DOM and reconciliation algorithm.\nHow does React work? # Virtual DOM and the reconciliation algorithm # Virtual DOM is a data structure built to mimic the real DOM with one difference:\nA virtual DOM object has the same properties as a real DOM object, but it lacks the real thing\u0026rsquo;s power to directly change what\u0026rsquo;s on the screen, Codecademy. The thing is that operations to update the real DOM are generally expensive in memory.\nWhen you update the component state in React these changes are applied to the virtual DOM, then it’s time for the reconciliation algorithm (or diffing algorithm) to compare the changes between the virtual DOM and the Real DOM.\nFinally, it will apply and update the changes only to those objects and only those objects in the Real DOM.\nif you’re familiar with Git, you could think of DOM as your main branch, Virtual DOM as your Develop branch, and the reconciliation algorithm as your Pull Request, it’s not exactly the same but it’s a mental model that makes it easier to understand the concept.\nVirtual DOM and the reconciliation algorithm, by brainhub React can update only the necessary parts of the DOM. React’s reputation for performance comes largely from this innovation, Codecademy. Also, this abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app according.\nNext Chapter: Components in React vs Angular # For now, this is enough of React’s architecture, later in the course, we’re going to revisit it expanding it with more stuff like React Fiber and other interesting things.\nIn the next chapter, we’re going to check the side-by-side differences between React and Angular components: the basics, local state management, component life cycles, and basic styling.\nIf would like to know when the next chapter in this course gets released, please subscribe to my newsletter at the end of this page.\nLearn more # Virtual DOM and Internals React: The Virtual DOM React Fiber Architecture Is React a Library or a Framework? Here\u0026rsquo;s Why it Matters What Is React? Everything a Tech Leader Needs to Know The Good and the Bad of ReactJS and React Native Client-side architecture Please, subscribe to our newsletter to get our amazing content! ","date":"9 September 2022","permalink":"/posts/react-crash-course-for-angular-developers-react-architecture/","section":"Posts","summary":"Course Index # React Architecture A JavaScript library for building user interfaces, reactjs.","title":"React Crash Course for Angular Developers: React Architecture."},{"content":"","date":"9 September 2022","permalink":"/tags/virtual-dom/","section":"Tags","summary":"","title":"virtual dom"},{"content":" Welcome to the course I recently talked with a colleague who is an Angular specialist but was looking to learn React to add one more tool to his portfolio. We were talking about similar ways to do the same thing in Angular and React and the idea for this article came: how about a React Crash Course for Angular Developers? In the end, it is Frontend or UI development, most of the knowledge is transferable.\nWe will divide the course into topics and how things are done in Angular and then the React counterpart side by side.\nThis is an intensive-turbo-crash course, which means that I\u0026rsquo;ll be assuming you are familiar with a lot of Web Development concepts but if not, I\u0026rsquo;ll be adding reference links at the end of each chapter, let\u0026rsquo;s begin.\nTable of content (Work in progress) # React Architecture. Components. Please, subscribe to our newsletter to get our amazing content! ","date":"9 September 2022","permalink":"/posts/react-crash-course-for-angular-developers-index/","section":"Posts","summary":"Welcome to the course I recently talked with a colleague who is an Angular specialist but was looking to learn React to add one more tool to his portfolio.","title":"React Crash Course for Angular Developers"},{"content":"","date":"5 September 2022","permalink":"/tags/frontend/","section":"Tags","summary":"","title":"frontend"},{"content":"One time I was working on a legacy React project, I ran a recently added unit test and I got this error:\nProblem\nJest: TypeError: replaceAll is not a function I was confused at the beginning because in the browser the component was working like a charm using replaceAll method, but it turns out that replaceAll is a new function not implemented in all browsers nor older Node.js versions.\nSolution\nInstall the replaceAll polyfill and add it to the jest setup configuration file. Install the replaceAll npm i string.prototype.replaceall Modify your Jest config, add a setupFilesAfterEnv property as below: { \u0026#34;jest\u0026#34;: { \u0026#34;setupFilesAfterEnv\u0026#34;: [\u0026#34;\u0026lt;rootDir\u0026gt;/jestSetup.js\u0026#34;] } } Add the following code to your jestSetup file import replaceAllInserter from \u0026#39;string.prototype.replaceall\u0026#39;; replaceAllInserter.shim(); Happy coding!\nSource\nPlease, subscribe to our newsletter to get our amazing content! ","date":"5 September 2022","permalink":"/posts/how-to-solve-replaceall-error-jest/","section":"Posts","summary":"One time I was working on a legacy React project, I ran a recently added unit test and I got this error:","title":"How to Solve the replaceAll error in Jest?"},{"content":"","date":"5 September 2022","permalink":"/tags/react-testing-library/","section":"Tags","summary":"","title":"react testing library"},{"content":"","date":"5 September 2022","permalink":"/tags/software-development/","section":"Tags","summary":"","title":"software development"},{"content":"","date":"5 September 2022","permalink":"/tags/troubleshooting/","section":"Tags","summary":"","title":"troubleshooting"},{"content":"","date":"5 September 2022","permalink":"/tags/unit-testing/","section":"Tags","summary":"","title":"unit testing"},{"content":"I love React Testing Library and if you’re here you love it too, but when we’re testing a component with many lines of JSX and trying to print it React Testing Library will not show the entire component.\nProblem\n// Problem 🔴 screen.debug() Solution\nLuckily the solution to this problem is straightforward, the following command will print the whole component in the console.\n// Solution ✅ screen.debug(undefined, Infinity) Source\nPlease, subscribe to our newsletter to get our amazing content! ","date":"30 August 2022","permalink":"/posts/how-to-print-entire-component-screen-debug/","section":"Posts","summary":"I love React Testing Library and if you’re here you love it too, but when we’re testing a component with many lines of JSX and trying to print it React Testing Library will not show the entire component.","title":"How to print the entire component using screen.debug() in React Testing Library?"},{"content":"","date":"27 August 2022","permalink":"/tags/agile/","section":"Tags","summary":"","title":"agile"},{"content":"","date":"27 August 2022","permalink":"/tags/good-practices/","section":"Tags","summary":"","title":"good practices"},{"content":"","date":"27 August 2022","permalink":"/tags/product-design/","section":"Tags","summary":"","title":"product design"},{"content":"","date":"27 August 2022","permalink":"/tags/scrum/","section":"Tags","summary":"","title":"scrum"},{"content":"","date":"27 August 2022","permalink":"/tags/software-design/","section":"Tags","summary":"","title":"software design"},{"content":"","date":"27 August 2022","permalink":"/tags/software-engineering/","section":"Tags","summary":"","title":"Software engineering"},{"content":" Image by https://unsplash.com/es/fotos/zfVIh4cX_4c Let’s face it: Scrum it’s not perfect and while a lot of teams do their best to follow the methodology the best way possible the truth is that the real world is wild and sometimes you need to make compromises to deliver value and meet the business needs.\nProblem # Part of this imperfection is the way the user stories are written, one day I was given a story comprised just of a UI design and a title.\nBad user story, Figma UI used Somehow this story managed to escape from refinement and planning sessions and was not ready to be done, for me the story lacks key aspects an ideal good Frontend User Story should have:\nDescriptive title, check ✅. Final UI Design, check ✅. Clear and defined scope through acceptance criteria, fail 🔴. Unknown check: Dependencies, feasibility, follow-up tickets that should be created? etc, fail 🔴. The ideal user story structure # In the real world sometimes we can’t return things to the backlog if they are not ready, deadlines need to be met and a story like this needs to be “refined along the way”, let’s analyze this story and refine it the most possible.\nThe questions # Fruit name: What are the character limits for the fruit name? instead of a text box, should not be a selection box showing all the fruits offered by the business? Country: Why the country is not a selection box? Parent brand: Where do the values for the parent brand come from? should be hardcoded?, or come from an API service? does this service exist? Quantity: What’s the minimum and maximum quantity of fruits to be added to the basket? is this quantity the same for all the fruits offered by the business? (Possibly child) brand: Where do the values for a brand come from? Do the brands are related to the parent brand? what kind of cross-validation between parent and child brand exists?. What the hell is “items” in the items selection box? what’s the maximum or minimum of brands to be added? And finally, the create button, does the service for creating a basket exist? also, the ticket says create and edit, does this service handle the edit functionality too? The answers # We met with our Product owner, the designer, and the backend developer, after that we also got intel from real users and we brought clarity to the previous questions, leaving us with a beautifully crafted user story.\nTicket name: Create a new basket of fruits modal\nDesign:\nA better user story, Figma UI used Acceptance criteria\nList screen As a user, I’d like to create a new basket of fruit from the Basket fruit List Screen. Add a new basket button should show the Create a new basket of fruits modal. Fruits Fruits selection is a required field and its values come from Fruits service. The country is a required field, we should reuse the existing Country Component. Quantity Quantity is a required field and is an integer between 1 and 10. Brands Parent brand selection is a required field and its values come from Brands service. Children\u0026rsquo;s brand\u0026rsquo;s selection and branches are required fields and its values come from Brands service. I’d like to select a parent brand before being able to add or modify children\u0026rsquo;s brands, at least one child brand with a branch should be selected. If I select a new parent branch the children\u0026rsquo;s branch should be rebooted to its initial state. Create The previous validation should be met so I can create a correct basket of fruit. Loading and Error states Loading and error handling should use the same pattern used throughout the application. Dependencies\nCovered Loading and error state mechanism, ticket link. Basket fruit List Screen, ticket link. Get Fruits service, service swagger documentation. Get Brands service, service swagger documentation (for both parent and children brands). Existing Create Fruit Basket API Service Ticket - To do but API contract defined, mock API used in the meantime. Update Fruit Basket API Service Ticket - To do but API contract defined, mock API used in the meantime. Follow up tickets\nEdit a new basket of fruits modal - To Do\nConnect to the real API ticket for both Edit and Create flows - To do\nStory points: 3\nA note about Acceptance criteria, some people prefer to use BDD to write clear acceptance criteria, I usually prefer that too but in this article, for sake of brevity we did not use the given-then-when formula but I encourage you to take a look at this link if you’re not familiar with it.\nGive a hand to the Product Owner # A solution to this problem could be as Developers, pre-refine the stories: ask your Product Owner what will be the priority for the next sprint and take one hour per day and check the backlog, review the tickets and collect a list of the questions to bring to the next refinement, that way we decrease the risk of very thin or unclear stories reaching the sprint plus your knowledge about the business will increase over the time, which is always valuable.\nConclusion # The way that we wrote the user story here is not intended to be the only one or the perfect one with no flak, actually, we surely leave some unknows to be answered that might be discovered once the ticket is started and require small adjustments down the road, but hey: that’s the magic of agile, or not? adapt to the change! 🙈.\nAlso, some people would argue that we should not be dividing a story between a backend or frontend, or backend or mobile, and we should avoid the silos approach, and I tend to agree with this but sometimes this is how things work in some organizations and sometimes we should adapt to the current flow before trying to change it or improve it progressively, this is a story for another article.\nThe thing is that the structure given in this article serves as a starting point, The real takeaway behind this article is no matter what User Story structure you use the most important thing is: to use one that allows you to understand the requirement, we must not create software in the darkness assuming a lot of stuff, ask, refine, iterate.\nHappy coding!\nPlease, subscribe to our newsletter to get our amazing content! ","date":"27 August 2022","permalink":"/posts/the-ideal-frontend-user-story/","section":"Posts","summary":"Image by https://unsplash.","title":"The Ideal Frontend User Story"},{"content":"","date":"27 August 2022","permalink":"/tags/user-story/","section":"Tags","summary":"","title":"user story"},{"content":" Image by https://unsplash.com/es/fotos/4FBv5ZC3cdk Next year, January 2023, it will be 10 years since I started working as a Self Taught Software Developer, a decade has passed and now I just want to let out a lot of stuff from my chest, share my experience and help others in their road, plus improve my English skill which is not my primary language.\nAnd what’s better for that than a blog/Twitter or youtube channel?, this is just a post for saying Hi and welcome to this journey.\nLet\u0026rsquo;s get our knowledge to the next level!\nPlease, subscribe to our newsletter to get our amazing content! ","date":"26 August 2022","permalink":"/posts/my-first-post/","section":"Posts","summary":"Image by https://unsplash.","title":"My First Post"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]