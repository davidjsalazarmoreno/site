[{"content":"","date":"5 September 2022","permalink":"/","section":"davidjsmoreno.dev","summary":"","title":"davidjsmoreno.dev"},{"content":"","date":"5 September 2022","permalink":"/tags/frontend/","section":"Tags","summary":"","title":"frontend"},{"content":"","date":"5 September 2022","permalink":"/tags/how-to/","section":"Tags","summary":"","title":"how to"},{"content":"One time I was working on a legacy React project, I ran a recently added unit test and I got this error:\nProblem\nJest: TypeError: replaceAll is not a function I was confused at the beginning because in the browser the component was working like a charm using replaceAll method, but it turns out that replaceAll is a new function not implemented in all browsers nor older Node.js versions.\nSolution\nInstall the replaceAll polyfill and add it to the jest setup configuration file. Install the replaceAll npm i string.prototype.replaceall Modify your Jest config, add a setupFilesAfterEnv property as below: { \u0026#34;jest\u0026#34;: { \u0026#34;setupFilesAfterEnv\u0026#34;: [\u0026#34;\u0026lt;rootDir\u0026gt;/jestSetup.js\u0026#34;] } } Add the following code to your jestSetup file import replaceAllInserter from \u0026#39;string.prototype.replaceall\u0026#39;; replaceAllInserter.shim(); Happy coding!\nSource\n","date":"5 September 2022","permalink":"/posts/how-to-solve-replaceall-error-jest/","section":"Posts","summary":"One time I was working on a legacy React project, I ran a recently added unit test and I got this error:","title":"How to Solve the replaceAll error in Jest?"},{"content":"","date":"5 September 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"5 September 2022","permalink":"/tags/react/","section":"Tags","summary":"","title":"react"},{"content":"","date":"5 September 2022","permalink":"/tags/react-testing-library/","section":"Tags","summary":"","title":"react testing library"},{"content":"","date":"5 September 2022","permalink":"/tags/software-development/","section":"Tags","summary":"","title":"software development"},{"content":"","date":"5 September 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"5 September 2022","permalink":"/tags/troubleshooting/","section":"Tags","summary":"","title":"troubleshooting"},{"content":"","date":"5 September 2022","permalink":"/tags/unit-testing/","section":"Tags","summary":"","title":"unit testing"},{"content":"I love React Testing Library and if you‚Äôre here you love it too, but when we‚Äôre testing a component with many lines of JSX and trying to print it React Testing Library will not show the entire component.\nProblem\n// Problem üî¥ screen.debug() Solution\nLuckily the solution to this problem is straightforward, the following command will print the whole component in the console.\n// Solution ‚úÖ screen.debug(undefined, Infinity) Source\n","date":"30 August 2022","permalink":"/posts/how-to-print-entire-component-screen-debug/","section":"Posts","summary":"I love React Testing Library and if you‚Äôre here you love it too, but when we‚Äôre testing a component with many lines of JSX and trying to print it React Testing Library will not show the entire component.","title":"How to print the entire component using screen.debug() in React Testing Library?"},{"content":"","date":"27 August 2022","permalink":"/tags/agile/","section":"Tags","summary":"","title":"agile"},{"content":"","date":"27 August 2022","permalink":"/tags/good-practices/","section":"Tags","summary":"","title":"good practices"},{"content":"","date":"27 August 2022","permalink":"/tags/product-design/","section":"Tags","summary":"","title":"product design"},{"content":"","date":"27 August 2022","permalink":"/tags/scrum/","section":"Tags","summary":"","title":"scrum"},{"content":"","date":"27 August 2022","permalink":"/tags/software-design/","section":"Tags","summary":"","title":"software design"},{"content":"","date":"27 August 2022","permalink":"/tags/software-engineering/","section":"Tags","summary":"","title":"Software engineering"},{"content":" Image by https://unsplash.com/es/fotos/zfVIh4cX_4c Let‚Äôs face it: Scrum it‚Äôs not perfect and while a lot of teams do their best to follow the methodology the best way possible the truth is that the real world is wild and sometimes you need to make compromises to deliver value and meet the business needs.\nProblem # Part of this imperfection is the way the user stories are written, one day I was given a story comprised just of a UI design and a title.\nBad user story, Figma UI used Somehow this story managed to escape from refinement and planning sessions and was not ready to be done, for me the story lacks key aspects an ideal good Frontend User Story should have:\nDescriptive title, check ‚úÖ. Final UI Design, check ‚úÖ. Clear and defined scope through acceptance criteria, fail üî¥. Unknown check: Dependencies, feasibility, follow-up tickets that should be created? etc, fail üî¥. The ideal user story structure # In the real world sometimes we can‚Äôt return things to the backlog if they are not ready, deadlines need to be met and a story like this needs to be ‚Äúrefined along the way‚Äù, let‚Äôs analyze this story and refine it the most possible.\nThe questions # Fruit name: What are the character limits for the fruit name? instead of a text box, should not be a selection box showing all the fruits offered by the business? Country: Why the country is not a selection box? Parent brand: Where do the values for the parent brand come from? should be hardcoded?, or come from an API service? does this service exist? Quantity: What‚Äôs the minimum and maximum quantity of fruits to be added to the basket? is this quantity the same for all the fruits offered by the business? (Possibly child) brand: Where do the values for a brand come from? Do the brands are related to the parent brand? what kind of cross-validation between parent and child brand exists?. What the hell is ‚Äúitems‚Äù in the items selection box? what‚Äôs the maximum or minimum of brands to be added? And finally, the create button, does the service for creating a basket exist? also, the ticket says create and edit, does this service handle the edit functionality too? The answers # We met with our Product owner, the designer, and the backend developer, after that we also got intel from real users and we brought clarity to the previous questions, leaving us with a beautifully crafted user story.\nTicket name: Create a new basket of fruits modal\nDesign:\nA better user story, Figma UI used Acceptance criteria\nList screen As a user, I‚Äôd like to create a new basket of fruit from the Basket fruit List Screen. Add a new basket button should show the Create a new basket of fruits modal. Fruits Fruits selection is a required field and its values come from Fruits service. The country is a required field, we should reuse the existing Country Component. Quantity Quantity is a required field and is an integer between 1 and 10. Brands Parent brand selection is a required field and its values come from Brands service. Children\u0026rsquo;s brand\u0026rsquo;s selection and branches are required fields and its values come from Brands service. I‚Äôd like to select a parent brand before being able to add or modify children\u0026rsquo;s brands, at least one child brand with a branch should be selected. If I select a new parent branch the children\u0026rsquo;s branch should be rebooted to its initial state. Create The previous validation should be met so I can create a correct basket of fruit. Loading and Error states Loading and error handling should use the same pattern used throughout the application. Dependencies\nCovered Loading and error state mechanism, ticket link. Basket fruit List Screen, ticket link. Get Fruits service, service swagger documentation. Get Brands service, service swagger documentation (for both parent and children brands). Existing Create Fruit Basket API Service Ticket - To do but API contract defined, mock API used in the meantime. Update Fruit Basket API Service Ticket - To do but API contract defined, mock API used in the meantime. Follow up tickets\nEdit a new basket of fruits modal - To Do\nConnect to the real API ticket for both Edit and Create flows - To do\nStory points: 3\nA note about Acceptance criteria, some people prefer to use BDD to write clear acceptance criteria, I usually prefer that too but in this article, for sake of brevity we did not use the given-then-when formula but I encourage you to take a look at this link if you‚Äôre not familiar with it.\nGive a hand to the Product Owner # A solution to this problem could be as Developers, pre-refine the stories: ask your Product Owner what will be the priority for the next sprint and take one hour per day and check the backlog, review the tickets and collect a list of the questions to bring to the next refinement, that way we decrease the risk of very thin or unclear stories reaching the sprint plus your knowledge about the business will increase over the time, which is always valuable.\nConclusion # The way that we wrote the user story here is not intended to be the only one or the perfect one with no flak, actually, we surely leave some unknows to be answered that might be discovered once the ticket is started and require small adjustments down the road, but hey: that‚Äôs the magic of agile, or not? adapt to the change! üôà.\nAlso, some people would argue that we should not be dividing a story between a backend or frontend, or backend or mobile, and we should avoid the silos approach, and I tend to agree with this but sometimes this is how things work in some organizations and sometimes we should adapt to the current flow before trying to change it or improve it progressively, this is a story for another article.\nThe thing is that the structure given in this article serves as a starting point, The real takeaway behind this article is no matter what User Story structure you use the most important thing is: to use one that allows you to understand the requirement, we must not create software in the darkness assuming a lot of stuff, ask, refine, iterate.\nHappy coding!\n","date":"27 August 2022","permalink":"/posts/the-ideal-frontend-user-story/","section":"Posts","summary":"Image by https://unsplash.","title":"The Ideal Frontend User Story"},{"content":"","date":"27 August 2022","permalink":"/tags/user-story/","section":"Tags","summary":"","title":"user story"},{"content":" Image by https://unsplash.com/es/fotos/4FBv5ZC3cdk Next year, January 2023, it will be 10 years since I started working as a Self Taught Software Developer, a decade has passed and now I just want to let out a lot of stuff from my chest, share my experience and help others in their road, plus improve my English skill which is not my primary language.\nAnd what‚Äôs better for that than a blog/Twitter or youtube channel?, this is just a post for saying Hi and welcome to this journey.\nLet\u0026rsquo;s get our knowledge to the next level!\n","date":"26 August 2022","permalink":"/posts/my-first-post/","section":"Posts","summary":"Image by https://unsplash.","title":"My First Post"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]